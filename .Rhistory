swirl()
library(swirl)
swirl()
swirl()
quit()
load(swirl)
swirl()
load(swirl())
packageName(swirl)
library(swirl)
swirl()
num_vect<-c(0.5,55,-10,6)
tf<-num_vect(<1)
tf<-num_vect<1
tf
num_vect>=6
my_char<-("My","name","is")
my_char<-("My" "name" "is")
my_char<-с("My","name","is")
my_char<-c("My","name","is")
my_char
paste(mychar,collapse=" ")
paste(my_char,collapse=" ")
my_name(my_char,"Danila")
my_name<-c(my_char,"Danila")
my_name
paste(my_name,collapse=" ")
paste("Hello","world!",sep=" ")
paste(1:3,"X","Y","Z",sep="")
paste(1:3,c("X","Y","Z"),sep="")
paste(LETTERS,1:4,sep="-")
c(44,NA,5,NA)
x<-c(44,NA,5,NA)
x*3
y<-rnorm(1000)
z<-rep(NA,1000)
my_data<-sample(C(y,z),100)
my_data<-sample(с(y,z),100)
my_data<-sample(с(y,z),100)
my_data<-sample(c(y,z),100)
is.na(my_data)
my_na<-is.na(my_data)
my_na
my_data==NA
sum(my_na)
my_data
0/0
Inf/Inf
Inf-Inf
x
x[1:10]
x[is.na(x)]
x[!is.na(x)]
y<-x[!is.na(x)]
y
y[y>0]
x[x>0]
x[x>0&!is.na(x)]
x[!is.na(x)&x>0]
x[c(1,3,5)]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect<-(foo=11,bar=2,norf=NA)
vect<-c(foo=11,bar=2,norf=NA)
vwct
vect
names(vect)
vect2<-c(11,2,NA)
names(vect2)<-c("foo","bar","norf")
?identical
indentical(vect,vect2)
identical(vect,vect2)
vect["bar"]
vect[c("foo", "bar")]
swirl()
my_vector<-c(1:20)
my_vector<-1:20
my_vector
dim(my_vector)
lenght(my_vector)
length(my_vector)
dim(my_vector)<-c(4,5)
dim(my_vector)
`attributes(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix<-my_vector
?matrix
my_matrtix<-matrix(1:20,nrow=4,ncol = 5)
my_matrtix2<-matrix(1:20,nrow=4,ncol = 5)
my_matrtix2<-matrix(1:20,nrow = 4,ncol = 5)
my_matrix2<-matrix(1:20,nrow = 4,ncol = 5)
my_matrix2<-matrix(1:20,4,5)
my_matrix2 <- matrix(1:20,nrow = 4,ncol = 5,byrow = FALSE,dimnames = NULL)
my_matrix2 <- matrix(1:20,nrow = 4,ncol = 5)
info()
my_matrix2 <- matrix(1:20,nrow = 5,ncol = 4)
my_matrix2 <- matrix(my_vector,nrow = 4,ncol = 5)
identical(my_matrix,my_matrix2)
patients<-("Bill","Gina","Kelly","Sean")
patients<-c("Bill","Gina","Kelly","Sean")
cbind(patients,my_matrix)
my_data<-data.frame(patients,my_matrix)
my_data
class(my_data)
name_column<-c("patient","age","weight","bp","rating","test")
cnames<-c("patient","age","weight","bp","rating","test")
dim(my_data)<-cnames
dim(my_data)<-c(patients,cnames)
dim(my_data)<-c(,cnames)
dim(my_data)<-colnames(cnames)
colnames(my_data)<-cnames
my_data
?na.rm
??na.rm
svirl()
svirl()
swirl()
buy
bye()
swirl()
d1<-Sys.Date
d1<-Sys.Date()
class(d1)
unclass(d1)
d1
d2<-as.Date("1969-01-01")
unclass(d2)
t1<-Sys.time()
tq
t1
class(t1)
unclass(t1)
as.POSIXlt(sys.time())
as.POSIXlt(Sys.time())
t2<-as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
?str
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3<-c("October 17, 1986 08:24")
t3<-c(""October 17, 1986 08:24")
t3<-c(""October 17, 1986 08:24"")
t3<-c('October 17, 1986 08:24"')
t3<-c('"October 17, 1986 08:24"')
t3<-c(""October 17, 1986 08:24"")
t3<-c('"October 17, 1986 08:24"')
t3<-c(" "October 17, 1986 08:24" ")
t3<-c(" "October 17, 1986 08:24"")
t3<-c(" \"October 17, 1986 08:24\"")
t3<-c("\"October 17, 1986 08:24\"")
е3
t3
t3<-c('"October 17, 1986 08:24"')
t3<-sQuote(c('October 17, 1986 08:24'))
t3<-sQuote(c('October 17, 1986 08:24'))
t3<-sQuote(c("October 17, 1986 08:24"))
t3
t3<-dQuote(c("October 17, 1986 08:24"))
t3
info()
t3<-c(""October 17, 1986 08:24"")
t3<-c(""October 17, 1986 08:24"")
t3<-shQuote(c("October 17, 1986 08:24"))
skip()
bye()
x <- 1:10
if(x > 5) {
x <- 0
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
swirl
swirl()
library(swirl)
swirl()
head(flags)
dim(flags)
class(flags)
cls_list(flags,class)
cls_list,-lapply(flags,class)
cls_list<-lapply(flags,class)
cls_list
class(cls_list)
as.character(cls_list)
?sapply
sapply(flags,class)
cls_vect<-sapply(flags,class)
class(cls_vect)
sum(flags$orange)
flag_colors[,11:17]
flag_colors<-flags[,11:17]
head(flag_colors)
lapply(flag_colors,sum)
sapply(flag_colors,sum)
sapply(flag_colors,means)
sapply(flag_colors,mean)
flag_shapes<-flags[,19:23]
lapply(flag_shapes,range)
shape_mat<-sapply(flag_shapes,range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
lapply(flags,unique)
unique_vals <- lapply(flags, unique)
unique_vals
lapply(unique_vals,length)
apply(unique_vals,length)
sapply(unique_vals,length)
sapply(unique_vals,length)
sapply(unique_vals,unique)
sapply(flags,unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags,unique,numeric(1))
ok()
sapply(flags,class)
vapply(flags,class,character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate,
| flags$landmass, mean)
tapply(flags$animate,flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
library(datasets)
data(iris)
?iris
head(iris)
sapply(iris, mean)
tapply(iris$Sepal.Length,iris$Species,mean)
colMeans(iris)
apply(iris, 1, mean)
apply(iris[, 1:4], 2, mean)
library(datasets)
data(mtcars)
head(mtcars)
tapply(mtcars$mpg, mtcars$cyl, mean)
split(mtcars, mtcars$cyl)
with(mtcars, tapply(mpg, cyl, mean))
?with
mean(mtcars$mpg, mtcars$cyl)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
apply(mtcars, 2, mean)
sapply(mtcars, cyl, mean)
tapply(mtcars$hp, mtcars$cyl, mean)
class(tapply(mtcars$hp, mtcars$cyl, mean))
ss<-tapply(mtcars$hp, mtcars$cyl, mean)
ss[3]-ss[1]
debug(ls)
d
m
d
a
s
f
1
2
3
4
5
?debug
ls
quit
setwd("C:/Users/Black/Documents/R_codes/ProgrammingAssignment2-master")
?setNames
?setNames
?set
?штм
?inv
??inv
?<<-
install.packages(matlib)
load("cachematrix.R")
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinv <- function(solve) m <<- solve
getinv <- function() m
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinv()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinv(m)
m
}
y<-c(1:2,1:2)
cacheSolve()
cacheSolve(y)
makeCacheMatrix()
makeCacheMatrix(y)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
makeVector()
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cacheSolve(makeCacheMatrix())
cacheSolve(makeCacheMatrix(y))
y<-matrix(1:2,1:2)
Y
y
?matrix
y<-matrix(1:2,2,2)
cacheSolve(makeCacheMatrix(y))
solve(y)
y
y<-matrix(1,2,2)
cacheSolve(makeCacheMatrix(y))
y<-matrix(1:5,10,10)
cacheSolve(makeCacheMatrix(y))
y<-matrix(с(1,3,1,2),10,10)
y<-matrix(c(1,3,1,2),10,10)
cacheSolve(makeCacheMatrix(y))
solve(y)
y<-matrix(с(1,3,1,2),2,2)
y<-matrix(с(1,3,1,2),2,2)
y<-matrix(c(1,3,1,2),2,2)
cacheSolve(makeCacheMatrix(y))
solve(y)
cacheSolve(makeCacheMatrix
)
cacheSolve(makeCacheMatrix)
cacheSolve(makeCacheMatrix())
cacheSolve(makeCacheMatrix())
y<-c(1,2,3)
cachemean(cacheSolve())
cachemean(cacheSolve(NULL))
y<-matrix(c(1,3,1,2),2,2)
cachemean(cacheSolve(NULL))
cachemean(cacheSolve(y))
source("cachematrix.r")
cachemean(cacheSolve(y))
trace
source("cachematrix.r")
cachemean(cacheSolve(y))
y
cacheSolve(makeCacheMatrix())
cacheSolve(makeCacheMatrix(y))
5
source("cachematrix.r")
cacheSolve(makeCacheMatrix(y))
cacheSolve(makeCacheMatrix())
cacheSolve(y)
cacheSolve(y)
x<-makeCacheMatrix(y)
cacheSolve(x)
cacheSolve(x)
y<-matrix(c(1,3,1,4),2,2)
x<-makeCacheMatrix(y)
cacheSolve(x)
cacheSolve(x)
y<-matrix(c(1,3,1,4),2,2)
x<-makeCacheMatrix(y)
x
source("cachematrix.r")
x<-makeCacheMatrix(y)
cacheSolve(x)
cacheSolve(x)
source("cachematrix.r")
cacheSolve(x)
y<-matrix(c(1,3,1,9),2,2)
x<-makeCacheMatrix(y)
View(x)
View(x)
cacheSolve(x)
source("cachematrix.r")
cacheSolve(x)
source("cachematrix.r")
cacheSolve(x)
y<-matrix(c(1,3,1,9),2,2)
x<-makeCacheMatrix(y)
cacheSolve(x)
cacheSolve(x)
